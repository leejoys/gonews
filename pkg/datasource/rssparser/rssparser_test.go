package rssparser

import (
	"fmt"
	"gonews/pkg/storage/mongodb"
	"io"
	"os"
	"strings"
	"testing"
	"time"
)

//—é–Ω–∏—Ç-—Ç–µ—Å—Ç –¥–ª—è Parser_Parse
func TestParser_Parse(t *testing.T) {
	body:=io.Reader<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
<channel>
<title>GOSAMPLES - Learn Golang programming by example</title>
<link>https://gosamples.dev/</link>
<description>Learn Golang programming by example. GOSAMPLES is a library of Golang code snippets that let you solve everyday code problems.</description>
<generator>Hugo -- gohugo.io</generator>
<language>en-us</language>
<image>
<url>https://gosamples.dev/apple-touch-icon.png</url>
<title>GOSAMPLES - Learn Golang programming by example</title>
<link>https://gosamples.dev/</link>
</image>
<lastBuildDate>Mon, 25 Jan 2021 00:00:00 +0000</lastBuildDate>
<atom:link href="https://gosamples.dev/index.xml" rel="self" type="application/rss+xml"/>
<item>
<title>üî¢ Convert int to string in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/convert-int-to-string/</link>
<pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/convert-int-to-string/</guid>
<description><p>Use <a href="https://pkg.go.dev/strconv#FormatInt" target="_blank"><code>strconv.FormatInt</code></a> function to convert an integer variable to a string in Go.</p> <h3 id="int64-to-a-decimal-string">int64 to a decimal string</h3> <div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">number</span> <span class="kt">int64</span> <span class="p">=</span> <span class="mi">12</span> <span class="nx">str</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> </code></pre></div> <h3 id="int-int32-int16-int8-to-a-decimal-string">int, int32, int16, int8 to a decimal string</h3> <div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">number</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">12</span> <span class="c1">// you can use any integer here: int32, int16, int8 </span><span class="c1"></span><span class="nx">str</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">number</span><span class="p">),</span> <span class="mi">10</span><span class="p">)</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> </code></pre></div> <blockquote> <p>To convert <code>int</code> to <code>string</code> you can also use <a href="https://pkg.go.dev/strconv#Itoa" target="_blank"><code>strconv.Itoa</code></a> which is equivalent to <a href="https://pkg.go.dev/strconv#FormatInt" target="_blank"><code>strconv.FormatInt(int64(i), 10)</code></a>. <div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">number</span> <span class="o">:=</span> <span class="mi">12</span> <span class="nx">str</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> </code></pre></div></p> </blockquote> <h3 id="int64-to-a-hexadecimal-string">int64 to a hexadecimal string</h3> <div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">number</span> <span class="kt">int64</span> <span class="p">=</span> <span class="mi">12</span> <span class="c1">// you can use any integer here: int, int32, int16, int8 </span><span class="c1"></span><span class="nx">str</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> </code></pre></div> <h3 id="int64-to-an-octal-string">int64 to an octal string</h3> <div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">number</span> <span class="kt">int64</span> <span class="p">=</span> <span class="mi">12</span> <span class="c1">// int, int32, int16, int8 </span><span class="c1"></span><span class="nx">str</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> </code></pre></div> <h3 id="int64-to-a-binary-string">int64 to a binary string</h3> <div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">number</span> <span class="kt">int64</span> <span class="p">=</span> <span class="mi">12</span> <span class="c1">// int, int32, int16, int8 </span><span class="c1"></span><span class="nx">str</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> </code></pre></div></description>
</item>
<item>
<title>‚úíÔ∏è Write to a CSV file in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/write-csv/</link>
<pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/write-csv/</guid>
<description><p><a href="https://en.wikipedia.org/wiki/Comma-separated_values" target="_blank">CSV</a> is a popular data format used by Excel, Google Sheets and other spreadsheet apps to save and load tabular data. In this format, rows are separated by a newline character and each cell in a row is separated by a comma (or a tab in TSV format). Go has great built-in support for writing and reading CSV files. Check out how easy it is to write a simple CSV file:</p> <pre><code>package main import ( &quot;encoding/csv&quot; &quot;log&quot; &quot;os&quot; ) func main() { data := [][]string{ {&quot;vegetables&quot;, &quot;fruits&quot;}, {&quot;carrot&quot;, &quot;banana&quot;}, {&quot;potato&quot;, &quot;strawberry&quot;}, } // create a file file, err := os.Create(&quot;result.csv&quot;) if err != nil { log.Fatal(err) } defer file.Close() // initialize csv writer writer := csv.NewWriter(file) defer writer.Flush() // write all rows at once writer.WriteAll(data) // write single row extraData := []string{&quot;lettuce&quot;, &quot;raspberry&quot;} writer.Write(extraData) } </code></pre> <p>In the first step, you need to create a file where the CSV data can be saved. You can do this with the <a href="https://golang.org/pkg/os/#Create" target="_blank"><code>Create</code></a> function from the <a href="https://golang.org/pkg/os/" target="_blank"><code>os</code></a> package. Be sure to call <a href="https://golang.org/pkg/os/#File.Close" target="_blank"><code>file.Close()</code></a> to close the file after the data has been written.</p> <p>Then, we initialize <a href="https://golang.org/pkg/encoding/csv/#NewWriter" target="_blank"><code>csv.Writer</code></a> from the <a href="https://golang.org/pkg/encoding/csv/" target="_blank"><code>encoding/csv</code></a> package, that allows us to write data in CSV format. It&rsquo;s a buffered writer, so we should call <a href="https://golang.org/pkg/encoding/csv/#Writer.Flush" target="_blank"><code>writer.Flush()</code></a> at the end of the write to make sure all data is saved to the file.</p> <p>The CSV writer has two methods for saving data rows. We can use <a href="https://golang.org/pkg/encoding/csv/#Writer.WriteAll" target="_blank"><code>writer.WriteAll()</code></a> method when we know all the data at the time of writing, or <a href="https://golang.org/pkg/encoding/csv/#Writer.WriteAll" target="_blank"><code>writer.Write()</code></a> to write the data line by line.</p> <h3 id="write-to-a-tsv-file">Write to a TSV file</h3> <p>The standard separator of <a href="https://golang.org/pkg/encoding/csv/#Writer" target="_blank"><code>csv.Writer</code></a> is a comma, but you can easily change this by replacing the comma rune with another character:</p> <pre><code>writer.Comma = '\t' </code></pre> <p>In this way, our writer uses <a href="https://en.wikipedia.org/wiki/Tab-separated_values" target="_blank">TSV</a> (tab-separated values) encoding that is also a commonly used tabular data format.</p></description>
</item>
<item>
<title>üôå Case-insensitive string comparison in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/case-insensitive-string-comparison/</link>
<pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/case-insensitive-string-comparison/</guid>
<description><p>Is there a case-insensitive string comparison function in Go? Of course! Although the name does not seem to indicate it, <a href="https://golang.org/pkg/strings/#EqualFold" target="_blank"><code>strings.EqualFold</code></a> deals with it:</p> <pre><code>package main import ( &quot;fmt&quot; &quot;strings&quot; ) func main() { foo1 := &quot;foo&quot; foo2 := &quot;FOO&quot; fmt.Println(strings.EqualFold(foo1, foo2)) } </code></pre> <p>You may ask now why we can&rsquo;t convert both strings to upper or lowercase and, in this way, compare if they are case-insensitive equal. Of course, it works, but not for any case and any language. For example, in Greek, there are 3 forms of sigma letter:</p> <pre><code>g1 := &quot;œÇ&quot; // a final lowercase sigma g2 := &quot;Œ£&quot; // a capital sigma g3 := &quot;œÉ&quot; // a non-final sigma fmt.Println(strings.ToLower(g1)) fmt.Println(strings.ToLower(g2)) fmt.Println(strings.ToLower(g3)) fmt.Println(strings.EqualFold(g1, g2)) fmt.Println(strings.EqualFold(g1, g3)) fmt.Println(strings.EqualFold(g2, g3)) </code></pre> <p>Output:</p> <div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">œÇ œÉ œÉ true true true</code></pre></div> <p>Converting them to lowercase doesn&rsquo;t give the same form, but a comparison using <a href="https://golang.org/pkg/strings/#EqualFold" target="_blank"><code>strings.EqualFold</code></a> informs that they are equal. This is because <a href="https://golang.org/pkg/strings/#EqualFold" target="_blank"><code>strings.EqualFold</code></a> uses <a href="https://en.wikipedia.org/wiki/Letter_case#Unicode_case_folding_and_script_identification" target="_blank">case folding</a> (now it&rsquo;s clear why the function is named <code>EqualFold</code>) method which respects the case rules of different languages, so it always should be preffered method of case-insensitive comparison.</p></description>
</item>
<item>
<title>üèÅ Check if a string starts with a substring in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/starts-with/</link>
<pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/starts-with/</guid>
<description><p>It&rsquo;s really simple to check if a given string starts with another substring in Go. In many programming languages, there is a <code>startsWith()</code> function to do this. In Go, we have <a href="https://golang.org/pkg/strings/#HasPrefix" target="_blank"><code>HasPrefix()</code></a> from the <a href="https://golang.org/pkg/strings/" target="_blank"><code>strings</code></a> package. It returns true when a substring is the prefix of a string or false otherwise.</p> <pre><code>package main import ( &quot;fmt&quot; &quot;strings&quot; ) const name = &quot;GOSAMPLES&quot; func main() { fmt.Printf(&quot;GO is at the beginning of GOSAMPLES: %t\n&quot;, strings.HasPrefix(name, &quot;GO&quot;)) fmt.Printf(&quot;SAMPLES is at the beginning of GOSAMPLES: %t\n&quot;, strings.HasPrefix(name, &quot;SAMPLES&quot;)) } </code></pre> <p>Output:</p> <div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">GO is at the beginning of GOSAMPLES: true SAMPLES is at the beginning of GOSAMPLES: false</code></pre></div></description>
</item>
<item>
<title>‚úçÔ∏è Write to a file in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/write-file/</link>
<pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/write-file/</guid>
<description><p>Go has excellent built-in support for file operations. Using the <a href="https://golang.org/pkg/os/" target="_blank"><code>os</code></a> package, you can easily open, read from, write to and close the file. In this example, we focus on writing data to a file. We show you how you can write text and binary data in different ways - entire data at once, line by line, as an array of bytes in a specific place, or in a buffered manner.</p> <h3 id="write-the-entire-content-to-a-file-at-once">Write the entire content to a file at once</h3> <p>The shortest way of writing data to a file is to use the <a href="https://golang.org/pkg/os/#WriteFile" target="_blank"><code>os.WriteFile()</code></a> function. It takes three input parameters:</p> <ol> <li>Path to the file that we want to write to</li> <li>Byte data which we want to write to the file</li> <li><a href="https://en.wikipedia.org/wiki/File-system_permissions" target="_blank">Permission bits</a> of the file that will be created</li> </ol> <p>Creating and closing the file is done by the function itself, so it&rsquo;s no need to create or close the file before and after writing.</p> <blockquote> <p>If you are using the Go version earlier than 1.16, you will find the <a href="https://golang.org/pkg/io/ioutil/#WriteFile" target="_blank"><code>WriteFile()</code></a> function in the <a href="https://golang.org/pkg/io/ioutil" target="_blank"><code>ioutil</code></a> package.</p> </blockquote> <pre><code>package main import ( &quot;log&quot; &quot;os&quot; ) func main() { if err := os.WriteFile(&quot;file.txt&quot;, []byte(&quot;Hello GOSAMPLES!&quot;), 0666); err != nil { log.Fatal(err) } } </code></pre> <h3 id="write-text-data-to-a-file-line-by-line">Write text data to a file line by line</h3> <p>If you have your file&rsquo;s lines in separate variables, an array, or want to do some processing before writing a single line, you can write the data line by line using the <a href="https://golang.org/pkg/os/#File.WriteString" target="_blank"><code>func (*File) WriteString()</code></a> method. All you need to do is create a file, write your strings to it, and finally close the file.</p> <pre><code>package main import ( &quot;log&quot; &quot;os&quot; ) var lines = []string{ &quot;Go&quot;, &quot;is&quot;, &quot;the&quot;, &quot;best&quot;, &quot;programming&quot;, &quot;language&quot;, &quot;in&quot;, &quot;the&quot;, &quot;world&quot;, } func main() { // create file f, err := os.Create(&quot;file.txt&quot;) if err != nil { log.Fatal(err) } // remember to close the file defer f.Close() for _, line := range lines { _, err := f.WriteString(line + &quot;\n&quot;) if err != nil { log.Fatal(err) } } } </code></pre> <h3 id="write-byte-data-to-a-file">Write byte data to a file</h3> <p>As with writing strings line by line, we can also write byte data using the <a href="https://golang.org/pkg/os/#File.Write" target="_blank"><code>func (*File) Write()</code></a> method or <a href="https://golang.org/pkg/os/#File.WriteAt" target="_blank"><code>func (*File) WriteAt()</code></a> if you want to write data at a given offset.</p> <pre><code>package main import ( &quot;log&quot; &quot;os&quot; ) var bytes = []byte{ 0x47, // G 0x4f, // O 0x20, // &lt;space&gt; 0x20, // &lt;space&gt; 0x20, // &lt;space&gt; 0x50, // P 0x4c, // L 0x45, // E 0x53, // S } var additionalBytes = []byte{ 0x53, // S 0x41, // A 0x4d, // M } func main() { // create file f, err := os.Create(&quot;file.txt&quot;) if err != nil { log.Fatal(err) } // remember to close the file defer f.Close() // write bytes to the file _, err = f.Write(bytes) if err != nil { log.Fatal(err) } // write additional bytes to the file, start at index 2 _, err = f.WriteAt(additionalBytes, 2) if err != nil { log.Fatal(err) } } </code></pre> <h3 id="write-formatted-strings-to-a-file">Write formatted strings to a file</h3> <p>In addition to the <a href="https://golang.org/pkg/os/#File" target="_blank"><code>File</code></a> methods, we can use <a href="https://golang.org/pkg/fmt/#Fprintln" target="_blank"><code>fmt.Fprintln()</code></a> function to write data to a file. This function formats its operands, adds spaces between them, a new line at the end, and writes the output to the writer (first argument). It&rsquo;s great for simple line formatting or writing the string representation of a <code>struct</code> to a file.</p> <pre><code>package main import ( &quot;fmt&quot; &quot;log&quot; &quot;os&quot; ) var lines = []string{ &quot;Go&quot;, &quot;is&quot;, &quot;the&quot;, &quot;best&quot;, &quot;programming&quot;, &quot;language&quot;, &quot;in&quot;, &quot;the&quot;, &quot;world&quot;, } func main() { // create file f, err := os.Create(&quot;file.txt&quot;) if err != nil { log.Fatal(err) } // remember to close the file defer f.Close() for _, line := range lines { _, err := fmt.Fprintln(f, &quot;*&quot;, line, &quot;*&quot;) if err != nil { log.Fatal(err) } } } </code></pre> <h3 id="write-to-a-file-using-a-buffered-writer">Write to a file using a buffered writer</h3> <p>If you frequently write a small amount of data to a file, it can hurt the performance of your program. Each write is a costly system call, and if you don&rsquo;t need immediate file updates, it is a better idea to group these small writes into one. To do this, we can use <a href="https://golang.org/pkg/bufio/#Writer" target="_blank"><code>bufio.Writer</code></a> structure. Its writing functions do not save data directly to the file but keep it until the buffer underneath is full (default size is 4096 bytes) or the <a href="https://golang.org/pkg/bufio/#Writer.Flush" target="_blank"><code>Flush()</code></a> method is called. So make sure to call <a href="https://golang.org/pkg/bufio/#Writer.Flush" target="_blank"><code>Flush()</code></a> after the completed write to save the remaining data to the file.</p> <pre><code>package main import ( &quot;bufio&quot; &quot;log&quot; &quot;os&quot; ) var lines = []string{ &quot;Go&quot;, &quot;is&quot;, &quot;the&quot;, &quot;best&quot;, &quot;programming&quot;, &quot;language&quot;, &quot;in&quot;, &quot;the&quot;, &quot;world&quot;, } func main() { // create file f, err := os.Create(&quot;file.txt&quot;) if err != nil { log.Fatal(err) } // remember to close the file defer f.Close() // create new buffer buffer := bufio.NewWriter(f) for _, line := range lines { _, err := buffer.WriteString(line + &quot;\n&quot;) if err != nil { log.Fatal(err) } } // flush buffered data to the file if err := buffer.Flush(); err != nil { log.Fatal(err) } }</code></pre></description>
</item>
<item>
<title>üìñ Read a file in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/read-file/</link>
<pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/read-file/</guid>
<description><p>Reading files is one of the most common tasks in everyday programmer&rsquo;s work. You can do it in different ways depending on your needs. In this tutorial, we show you how to <a href="https://gosamples.dev/read-file/#read-an-entire-file">read the entire file at once</a>, <a href="https://gosamples.dev/read-file/#read-a-file-line-by-line">line by line</a>, <a href="https://gosamples.dev/read-file/#read-a-file-word-by-word">word by word</a>, and <a href="https://gosamples.dev/read-file/#read-a-file-in-chunks">in chunks</a>. All of these methods are very simple in Go üôÇ.</p> <h3 id="read-an-entire-file">Read an entire file</h3> <p>The simplest way of reading a text or binary file in Go is to use the <a href="https://golang.org/pkg/os/#ReadFile" target="_blank"><code>ReadFile()</code></a> function from the <a href="https://golang.org/pkg/os/" target="_blank"><code>os</code></a> package. This function reads the entire content of the file into a byte slice, so you should be careful when trying to read a large file - in this case, you should read the file line by line or in chunks. For small files, this function is more than sufficient.</p> <blockquote> <p>If you are using the Go version earlier than 1.16, you will find the <a href="https://golang.org/pkg/io/ioutil/#ReadFile" target="_blank"><code>ReadFile()</code></a> function in the <a href="https://golang.org/pkg/io/ioutil" target="_blank"><code>ioutil</code></a> package.</p> </blockquote> <pre><code>package main import ( &quot;fmt&quot; &quot;log&quot; &quot;os&quot; ) func main() { content, err := os.ReadFile(&quot;file.txt&quot;) if err != nil { log.Fatal(err) } fmt.Println(string(content)) } </code></pre> <p>Output:</p> <div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">Hello World! This is txt file read by Go!</code></pre></div> <h3 id="read-a-file-line-by-line">Read a file line by line</h3> <p>To read a file line by line, we can use a convenient <a href="https://golang.org/pkg/bufio/#Scanner" target="_blank"><code>bufio.Scanner</code></a> structure. Its constructor, <a href="https://golang.org/pkg/bufio/#NewScanner" target="_blank"><code>NewScanner()</code></a>, takes an opened file (remember to close the file after the operation is done, for example, by using <code>defer</code> statement) and lets you read subsequent lines through <a href="https://golang.org/pkg/bufio/#Scanner.Scan" target="_blank"><code>Scan()</code></a> and <a href="https://golang.org/pkg/bufio/#Scanner.Text" target="_blank"><code>Text()</code></a> methods. Using <a href="https://golang.org/pkg/bufio/#Scanner.Err" target="_blank"><code>Err()</code></a> method, you can check errors encountered during file reading.</p> <pre><code>package main import ( &quot;bufio&quot; &quot;fmt&quot; &quot;log&quot; &quot;os&quot; ) func main() { // open file f, err := os.Open(&quot;file.txt&quot;) if err != nil { log.Fatal(err) } // remember to close the file at the end of the program defer f.Close() // read the file line by line using scanner scanner := bufio.NewScanner(f) for scanner.Scan() { // do something with a line fmt.Printf(&quot;line: %s\n&quot;, scanner.Text()) } if err := scanner.Err(); err != nil { log.Fatal(err) } } </code></pre> <p>Output: <div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">line: Hello World! line: This is txt file read by Go!</code></pre></div></p> <h3 id="read-a-file-word-by-word">Read a file word by word</h3> <p>Reading a file word by word is almost the same as reading <a href="https://gosamples.dev/read-file/#read-a-file-line-by-line">line by line</a>. You only need to change the split function of the <a href="https://golang.org/pkg/bufio/#Scanner" target="_blank"><code>Scanner</code></a> from the default <a href="https://golang.org/pkg/bufio/#ScanLines" target="_blank"><code>ScanLines()</code></a> to <a href="https://golang.org/pkg/bufio/#ScanWords" target="_blank"><code>ScanWords()</code></a>.</p> <pre><code>package main import ( &quot;bufio&quot; &quot;fmt&quot; &quot;log&quot; &quot;os&quot; ) func main() { // open file f, err := os.Open(&quot;file.txt&quot;) if err != nil { log.Fatal(err) } // remember to close the file at the end of the program defer f.Close() // read the file word by word using scanner scanner := bufio.NewScanner(f) scanner.Split(bufio.ScanWords) for scanner.Scan() { // do something with a word fmt.Println(scanner.Text()) } if err := scanner.Err(); err != nil { log.Fatal(err) } } </code></pre> <p>Output:</p> <div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">Hello World! This is txt file read by Go!</code></pre></div> <h3 id="read-a-file-in-chunks">Read a file in chunks</h3> <p>When you have a very large file or don&rsquo;t want to store the entire file in memory, you can read the file in fixed-size chunks. In this case, you need to create a byte slice of the specified size (<code>chunkSize</code> in the example) as a buffer for storing the subsequent read bytes. Using <a href="https://golang.org/pkg/os/#File.Read" target="_blank"><code>Read()</code></a> method of the <a href="https://golang.org/pkg/os/#File" target="_blank"><code>File</code></a> type, we can load the next chunk of the file data. The reading loop finishes when an <a href="https://golang.org/pkg/io/#pkg-variables" target="_blank"><code>io.EOF</code></a> error occurs, indicating the end of the file.</p> <pre><code>package main import ( &quot;fmt&quot; &quot;io&quot; &quot;log&quot; &quot;os&quot; ) const chunkSize = 10 func main() { // open file f, err := os.Open(&quot;file.txt&quot;) if err != nil { log.Fatal(err) } // remember to close the file at the end of the program defer f.Close() buf := make([]byte, chunkSize) for { n, err := f.Read(buf) if err != nil &amp;&amp; err != io.EOF { log.Fatal(err) } if err == io.EOF { break } fmt.Println(string(buf[:n])) } } </code></pre> <p>Output:</p> <div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">Hello Worl d! This is txt file read by Go !</code></pre></div></description>
</item>
<item>
<title>üî¢ Generate a random number in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/random-numbers/</link>
<pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/random-numbers/</guid>
<description><p>To generate a random number in Go (actually, it&rsquo;s <a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator" target="_blank">pseudo-random</a>, but in this article, we will refer to it as random), you just need to use the <a href="https://golang.org/pkg/math/rand/" target="_blank"><code>math/rand</code></a> package.</p> <h4 id="generate-random-integer-number-also-in-a-given-range">Generate random integer number (also in a given range)</h4> <pre><code>package main import ( &quot;fmt&quot; &quot;math/rand&quot; &quot;time&quot; ) func randInt(min, max int) int { return min + rand.Intn(max-min) } func main() { rand.Seed(time.Now().UnixNano()) fmt.Printf(&quot;random integer: %d\n&quot;, rand.Int()) fmt.Printf(&quot;random integer in range [5, 10): %d\n&quot;, randInt(5, 10)) } </code></pre> <h4 id="generate-random-float64-number-also-in-a-given-range">Generate random float64 number (also in a given range)</h4> <pre><code>package main import ( &quot;fmt&quot; &quot;math/rand&quot; &quot;time&quot; ) func randFloat(min, max float64) float64 { return min + rand.Float64()*(max-min) } func main() { rand.Seed(time.Now().UnixNano()) fmt.Printf(&quot;random float64: %f\n&quot;, rand.Float64()) fmt.Printf(&quot;random float64 in range [2.4, 3.2): %f\n&quot;, randFloat(2.4, 3.2)) } </code></pre> <h3 id="how-it-works">How it works</h3> <ol class="steps"> <li class="steps__item"> <span class="steps__itemTitle">Seed</span> <div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">rand</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">())</span> </code></pre></div> <p>In the first line of the <code>main</code> function, we set <a href="https://en.wikipedia.org/wiki/Random_seed" target="_blank">seed</a> to initialize a pseudorandom number generator. The default <a href="https://golang.org/pkg/math/rand/" target="_blank"><code>math/rand</code></a> number generator is deterministic, so it will give the same output sequence for the same seed value. You can check this by removing the first line of the main function and running the program a couple of times - we always get the same &ldquo;random&rdquo; numbers. It is because the algorithm produces new values by performing some operations on the previous value, and when the initial value (the seed value) stays the same, we get the same output numbers. To avoid this, we use current time - <code>time.Now().UnixNano()</code> as the seed.</p> </li> <li class="steps__item"> <span class="steps__itemTitle">Random number generating function</span> <div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;random integer: %d\n&#34;</span><span class="p">,</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Int</span><span class="p">())</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;random float64: %f\n&#34;</span><span class="p">,</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Float64</span><span class="p">())</span> </code></pre></div> <p>After the seed initialization, we can generate a random number using one of the <a href="https://golang.org/pkg/math/rand/" target="_blank"><code>math/rand</code></a> package functions, for example:</p> <ul> <li><a href="https://golang.org/pkg/math/rand/#Int" target="_blank"><code>func Int() int</code></a></li> <li><a href="https://golang.org/pkg/math/rand/#Intn" target="_blank"><code>func Intn(n int) int</code></a></li> <li><a href="https://golang.org/pkg/math/rand/#Int63" target="_blank"><code>func Int63() int64</code></a></li> <li><a href="https://golang.org/pkg/math/rand/#Int63n" target="_blank"><code>func Int63n(n int64) int64</code></a></li> <li><a href="https://golang.org/pkg/math/rand/#Uint64" target="_blank"><code>func Uint64() uint64</code></a></li> <li><a href="https://golang.org/pkg/math/rand/#Float64" target="_blank"><code>func Float64() float64</code></a></li> </ul> <p>See <a href="https://golang.org/pkg/math/rand/" target="_blank"><code>math/rand</code></a> package documentation for more information.</p> </li> <li class="steps__item"> <span class="steps__itemTitle">Random number in a range</span> <pre><code>func randInt(min, max int) int { return min + rand.Intn(max-min) } <p>func randFloat(min, max float64) float64 { return min + rand.Float64()*(max-min) } </code></pre></p> <p>There is no function in the <a href="https://golang.org/pkg/math/rand/" target="_blank"><code>math/rand</code></a> package that generates random numbers in the <code>[min, max)</code> range, so we have to shift the results from the function <a href="https://golang.org/pkg/math/rand/#Intn" target="_blank"><code>rand.Intn()</code></a> or <a href="https://golang.org/pkg/math/rand/#Float64" target="_blank"><code>rand.Float64()</code></a> to achieve a similar result. The <a href="https://golang.org/pkg/math/rand/#Intn" target="_blank"><code>rand.Intn()</code></a> can generate a value in the range <code>[0, n)</code>, so to get a value in the range <code>[min, max)</code> we need to generate a value in the range <code>[0, max-min)</code> and add <code>min</code> to the result.</p> <p>The <a href="https://golang.org/pkg/math/rand/#Float64" target="_blank"><code>rand.Float64()</code></a> produces number in <code>[0.0, 1.0)</code>. To get number in <code>[min, max)</code> range multiply the result by <code>max-min</code> and add <code>min</code>.</p> </li> </ol></description>
</item>
<item>
<title>üçÉ Get, set, list and other operations on environment variables in Golang</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/environment-variables/</link>
<pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/environment-variables/</guid>
<description><p><a href="https://en.wikipedia.org/wiki/Environment_variable" target="_blank">Environment variables</a> are often used as a way to store the app configuration values. Instead of keeping sensitive data like passwords in a code repository, we can just set them as environment variables that the program then reads while running. In Golang&rsquo;s <a href="https://golang.org/pkg/os/" target="_blank"><code>os</code></a> package, there are some functions that make it easy to set or unset environment variables, get or list environment variables, and clear environment variables.</p> <ul> <li><a href="https://golang.org/pkg/os/#Getenv" target="_blank"><code>func Getenv(key string) string</code></a> gets value of the <code>key</code> environment variable. If the variable is not set it returns empty string.</li> <li><a href="https://golang.org/pkg/os/#LookupEnv" target="_blank"><code>func LookupEnv(key string) (string, bool)</code></a> returns the value of the <code>key</code> environment variable and a boolean flag that is true if the variable is set. With <code>LookupEnv()</code>, you can test if an environment variable exists.</li> <li><a href="https://golang.org/pkg/os/#Setenv" target="_blank"><code>func Setenv(key, value string) error</code></a> sets the <code>value</code> of the <code>key</code> environment variable. It returns an error if it&rsquo;s not possible.</li> <li><a href="https://golang.org/pkg/os/#Unsetenv" target="_blank"><code>func Unsetenv(key string) error</code></a> unsets the <code>key</code> environment variable and returns an error if it&rsquo;s not possible.</li> <li><a href="https://golang.org/pkg/os/#Environ" target="_blank"><code>func Environ() []string</code></a> returns all environment variables as <code>key=value</code> strings.</li> <li><a href="https://golang.org/pkg/os/#Clearenv" target="_blank"><code>func Clearenv()</code></a> deletes all environment variables.</li> </ul> <p>Look at the example to compare how these functions work:</p> <pre><code>package main import ( &quot;fmt&quot; &quot;log&quot; &quot;os&quot; &quot;strings&quot; ) const userKey = &quot;GOSAMPLES_USER&quot; func main() { // set environment variable err := os.Setenv(userKey, &quot;admin&quot;) if err != nil { log.Fatal(err) } // get environment variable fmt.Printf(&quot;os.Getenv(): %s=%s\n&quot;, userKey, os.Getenv(userKey)) // iterate over all environment variables and check if our variable is set for _, envStr := range os.Environ() { if strings.HasPrefix(envStr, userKey) { fmt.Printf(&quot;os.Environ(): %s environment variable is set: %s\n&quot;, userKey, envStr) } } // lookup environment variable val, isSet := os.LookupEnv(userKey) fmt.Printf(&quot;os.LookupEnv(): %s variable is set: %t, value: %s\n&quot;, userKey, isSet, val) // unset environment variable if err := os.Unsetenv(userKey); err != nil { log.Fatal(err) } // lookup environment variable again - now it should not be set val, isSet = os.LookupEnv(userKey) fmt.Printf(&quot;os.Unsetenv(); %s variable is set: %t, value: %s\n&quot;, userKey, isSet, val) // clear environment variables os.Clearenv() fmt.Printf(&quot;os.Clearenv(): number of environment variables: %d\n&quot;, len(os.Environ())) } </code></pre> <p>Output:</p> <div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">os.Getenv<span class="o">()</span>: <span class="nv">GOSAMPLES_USER</span><span class="o">=</span>admin os.Environ<span class="o">()</span>: GOSAMPLES_USER environment variable is set: <span class="nv">GOSAMPLES_USER</span><span class="o">=</span>admin os.LookupEnv<span class="o">()</span>: GOSAMPLES_USER variable is set: true, value: admin os.Unsetenv<span class="o">()</span><span class="p">;</span> GOSAMPLES_USER variable is set: false, value: os.Clearenv<span class="o">()</span>: number of environment variables: <span class="m">0</span></code></pre></div></description>
</item>
<item>
<title>üí§ While loop in Golang</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/while-loop/</link>
<pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/while-loop/</guid>
<description><p>As with the <a href="https://gosamples.dev/foreach">foreach</a>, there is no <code>while</code> keyword in Golang. However, we can make a <code>while</code> loop with the <code>for</code> statement. Classic <code>for</code> has the form of:</p> <pre><code>for initialization; condition; post-condition { } </code></pre> <p>where:</p> <ul> <li><code>initialization</code> is executed before the first iteration</li> <li><code>condition</code> is boolean expression evaluated before every iteration</li> <li><code>post-condition</code> is executed after every iteration</li> </ul> <p>When we omit the initialization and post-condition statements, we get the conditional <code>for</code> loop that has the same effect as <code>while</code> loop available in other programming languages:</p> <pre><code>for condition { } </code></pre> <p>Example:</p> <pre><code>package main import &quot;fmt&quot; func main() { i := 1 var gte1000 bool for !gte1000 { i *= 10 fmt.Println(i) if i &gt;= 1000 { gte1000 = true } } } </code></pre> <p>Since Go&rsquo;s <code>for</code> statement is very flexible, we can initialize the condition variable inside the loop and ignore the post-condition statement (notice <code>;</code> at the end of the <code>for</code> declaration - we use classic <code>for</code> here):</p> <pre><code>package main import &quot;fmt&quot; func main() { i := 1 for gte1000 := false; !gte1000; { i *= 10 fmt.Println(i) if i &gt;= 1000 { gte1000 = true } } } </code></pre> <p>Output: <div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="m">10</span> <span class="m">100</span> <span class="m">1000</span></code></pre></div></p></description>
</item>
<item>
<title>ü™ì Split a string in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/split-string/</link>
<pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/split-string/</guid>
<description><p>To split a string in Golang, you can use any of the four functions available in the <a href="https://golang.org/pkg/strings/" target="_blank"><code>strings</code></a> package:</p> <ul> <li><a href="https://golang.org/pkg/strings/#Split" target="_blank"><code><strong>strings.Split(s, sep string) []string</strong></code></a> - splits a <code>s</code> string by the <code>sep</code> separator and returns a slice of the substrings <strong>between</strong> every occurrence of the separator. The output substrings do not include the separator.</li> <li><a href="https://golang.org/pkg/strings/#SplitN" target="_blank"><code><strong>strings.SplitN(s, sep string, n int) []string</strong></code></a> - has the same effect as <code>strings.Split()</code>, but with the <code>n</code> parameter you can specify the maximum number of substrings the output slice should contain.</li> <li><a href="https://golang.org/pkg/strings/#SplitAfter" target="_blank"><code><strong>strings.SplitAfter(s, sep string) []string</strong></code></a> - splits a <code>s</code> string by the <code>sep</code> separator and returns a slice of the substrings <strong>splitted after</strong> every occurrence of the separator. The output substrings include the separator.</li> <li><a href="https://golang.org/pkg/strings/#SplitAfter" target="_blank"><code><strong>strings.SplitAfterN(s, sep string, n int) []string</strong></code></a> - has the same effect as <code>strings.SplitAfter()</code>, but with the <code>n</code> parameter you can specify the maximum number of substrings the output slice should contain.</li> </ul> <p>See the examples to compare these four ways to split a string:</p> <pre><code>package main import ( &quot;fmt&quot; &quot;strings&quot; ) func main() { str := &quot;strawberry, blueberry, raspberry&quot; fmt.Println(&quot;strings.Split():&quot;) for _, s := range strings.Split(str, &quot;, &quot;) { fmt.Printf(&quot;- %s\n&quot;, s) } fmt.Printf(&quot;\nstrings.SplitN()\n&quot;) for _, s := range strings.SplitN(str, &quot;, &quot;, 2) { fmt.Printf(&quot;- %s\n&quot;, s) } fmt.Printf(&quot;\nstrings.SplitAfter()\n&quot;) for _, s := range strings.SplitAfter(str, &quot;, &quot;) { fmt.Printf(&quot;- %s\n&quot;, s) } fmt.Printf(&quot;\nstrings.SplitAfterN()\n&quot;) for _, s := range strings.SplitAfterN(str, &quot;, &quot;, 2) { fmt.Printf(&quot;- %s\n&quot;, s) } } </code></pre> <p>Output:</p> <div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">strings.Split<span class="o">()</span>: - strawberry - blueberry - raspberry strings.SplitN<span class="o">()</span> - strawberry - blueberry, raspberry strings.SplitAfter<span class="o">()</span> - strawberry, - blueberry, - raspberry strings.SplitAfterN<span class="o">()</span> - strawberry, - blueberry, raspberry</code></pre></div></description>
</item>
<item>
<title>‚õìÔ∏è URL Decode in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/url-decode/</link>
<pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/url-decode/</guid>
<description><p>To decode an escaped URL in Golang you can just use the parsing URL function <a href="https://golang.org/pkg/net/url/#Parse" target="_blank"><code>url.Parse</code></a> from the <a href="https://golang.org/pkg/net/url" target="_blank"><code>url</code></a> package. It parses and decodes all parts of the URL.</p> <blockquote> <p>If you want to URL encode a path, a query, or the whole URL, see <a href="https://gosamples.dev/url-encode">URL Encode in Go</a> post.</p> </blockquote> <pre><code>package main import ( &quot;fmt&quot; &quot;log&quot; &quot;net/url&quot; ) func main() { // decode URL by url.Parse parsedURL, err := url.Parse(&quot;https://example.com/foo+bar%21?query=ab%2Bc&amp;query2=de%24f&quot;) if err != nil { log.Fatal(err) return } fmt.Printf(&quot;scheme: %s\n&quot;, parsedURL.Scheme) fmt.Printf(&quot;host: %s\n&quot;, parsedURL.Host) fmt.Printf(&quot;path: %s\n&quot;, parsedURL.Path) fmt.Println(&quot;query args:&quot;) for key, values := range parsedURL.Query() { fmt.Printf(&quot; %s = %s\n&quot;, key, values[0]) } } </code></pre> <p>Result: <div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">scheme: https host: example.com path: /foo+bar! query args: <span class="nv">query</span> <span class="o">=</span> ab+c <span class="nv">query2</span> <span class="o">=</span> de<span class="nv">$f</span></code></pre></div></p> <p>Alternatively, you can use functions that decode and parse different parts of the URL:</p> <ul> <li><a href="https://golang.org/pkg/net/url/#PathUnescape" target="_blank"><code>url.PathUnescape()</code></a> - to decode string that is inside an URL path segment. Path segment is encoded differently from the query (for example, the <code>+</code> character is allowed in the path), so it needs a different method from the query part.</li> <li><a href="https://golang.org/pkg/net/url/#QueryUnescape" target="_blank"><code>url.QueryUnescape()</code></a> - to decode string that is inside an URL query.</li> <li><a href="https://golang.org/pkg/net/url/#ParseQuery" target="_blank"><code>url.ParseQuery()</code></a> - to decode string inside an URL query and parse it to the form of <a href="https://golang.org/pkg/net/url/#Values" target="_blank"><code>url.Values</code></a> map.</li> </ul> <p>See the example to compare these functions:</p> <pre><code>package main import ( &quot;fmt&quot; &quot;log&quot; &quot;net/url&quot; ) func main() { // decode path by url.PathUnescape path := &quot;foo+bar%21&quot; unescapedPath, err := url.PathUnescape(path) if err != nil { log.Fatal(err) return } fmt.Printf(&quot;unescaped path: %s\n&quot;, unescapedPath) // decode query by url.QueryUnescape query := &quot;query=ab%2Bc&amp;query2=de%24f&quot; unescapedQuery, err := url.QueryUnescape(query) if err != nil { log.Fatal(err) return } fmt.Printf(&quot;unescaped query: %s\n&quot;, unescapedQuery) // decode query and parse by url.ParseQuery parsedQuery, err := url.ParseQuery(query) if err != nil { log.Fatal(err) return } fmt.Println(&quot;parsed query args:&quot;) for key, values := range parsedQuery { fmt.Printf(&quot; %s = %s\n&quot;, key, values[0]) } } </code></pre> <p>Result: <div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">unescaped path: foo+bar! unescaped query: <span class="nv">query</span><span class="o">=</span>ab+c<span class="p">&amp;</span><span class="nv">query2</span><span class="o">=</span>de<span class="nv">$f</span> parsed query args: <span class="nv">query</span> <span class="o">=</span> ab+c <span class="nv">query2</span> <span class="o">=</span> de<span class="nv">$f</span></code></pre></div></p></description>
</item>
<item>
<title>üîó URL Encode in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/url-encode/</link>
<pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/url-encode/</guid>
<description><p>URL encoding, also known as <a href="https://en.wikipedia.org/wiki/Percent-encoding" target="_blank">percent-encoding</a>, is a method to encode URL using only a limited set of characters so that the URL can be safely transmitted over the internet. In Golang we have 2 basic functions in <code>net/url</code> package for encoding different parts of the URL:</p> <ul> <li><code>url.QueryEscape()</code> to encode string that is placed inside an URL query.</li> <li><code>url.PathEscape()</code> to encode string that is placed inside an URL path segment. Path segment is encoded differently from the query, for example, the <code>+</code> character is allowed in the path, and in the query, it should be encoded.</li> </ul> <p>Instead of building the URL manually, we can make this procedure a little easier by using <code>url.URL</code> structure. We just need to set Scheme, Host, Path of the URL and build RawQuery string by encoding query parameters inside <code>url.Values</code> struct.</p> <p>See the example to compare these two methods of URL encoding:</p> <pre><code>package main import ( &quot;fmt&quot; &quot;net/url&quot; ) func main() { // build url manually host := &quot;https://example.com/&quot; path := url.PathEscape(&quot;foo+bar!&quot;) query1Val := url.QueryEscape(&quot;ab+c&quot;) query2Val := url.QueryEscape(&quot;de$f&quot;) query := fmt.Sprintf(&quot;query=%s&amp;query2=%s&quot;, query1Val, query2Val) fmt.Printf(&quot;%-35s %s%s?%s\n&quot;, &quot;Manually built URL:&quot;, host, path, query) // build url using url.URL struct exampleURL := &amp;url.URL{ Scheme: &quot;https&quot;, Host: &quot;example.com&quot;, Path: &quot;/foo+bar!&quot;, } queryValues := url.Values{} queryValues.Add(&quot;query&quot;, &quot;ab+c&quot;) queryValues.Add(&quot;query2&quot;, &quot;de$f&quot;) exampleURL.RawQuery = queryValues.Encode() fmt.Printf(&quot;%-35s %s\n&quot;, &quot;URL built using url.URL struct:&quot;, exampleURL) } </code></pre> <div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Manually built URL: https://example.com/foo+bar%21?query<span class="o">=</span>ab%2Bc<span class="p">&amp;</span><span class="nv">query2</span><span class="o">=</span>de%24f URL built using url.URL struct: https://example.com/foo+bar%21?query<span class="o">=</span>ab%2Bc<span class="p">&amp;</span><span class="nv">query2</span><span class="o">=</span>de%24f</code></pre></div></description>
</item>
<item>
<title>üò¥ Sleep function in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/sleep/</link>
<pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/sleep/</guid>
<description><p>To pause the execution of a current program in Go, you just need to use <code>Sleep()</code> function defined in <a href="https://golang.org/pkg/time/#Sleep" target="_blank">time</a> package. As an argument, this function takes a variable of type <code>time.Duration</code>, which is the amount of time the program execution should be stopped for. It can be expressed as a number multiplied by a unit constant, for example <code>3*time.Second</code> means that the execution will be stopped for 3 seconds. Available units are:</p> <ul> <li><code>time.Nanosecond</code></li> <li><code>time.Microsecond</code></li> <li><code>time.Millisecond</code></li> <li><code>time.Second</code></li> <li><code>time.Minute</code></li> <li><code>time.Hour</code></li> </ul> <!-- end of unordered list --> <pre><code>package main import ( &quot;fmt&quot; &quot;time&quot; ) func main() { fmt.Println(&quot;before Sleep()&quot;) time.Sleep(3 * time.Second) fmt.Println(&quot;waking up after Sleep()&quot;) } </code></pre></description>
</item>
<item>
<title>ü§î Print type of variable in Golang</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/print-type/</link>
<pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/print-type/</guid>
<description><p>To print a variable&rsquo;s type, you can use the <code>%T</code> verb in the <code>fmt.Printf</code> function format. It&rsquo;s the simplest and most recommended way of printing type of a variable.</p> <pre><code>package main import ( &quot;fmt&quot; ) func main() { t1 := &quot;text&quot; t2 := []string{&quot;apple&quot;, &quot;strawberry&quot;, &quot;blueberry&quot;} t3 := map[string]float64{&quot;strawberry&quot;: 3.2, &quot;blueberry&quot;: 1.2} t4 := 2 t5 := 4.5 t6 := true fmt.Printf(&quot;t1: %T\n&quot;, t1) fmt.Printf(&quot;t2: %T\n&quot;, t2) fmt.Printf(&quot;t3: %T\n&quot;, t3) fmt.Printf(&quot;t4: %T\n&quot;, t4) fmt.Printf(&quot;t5: %T\n&quot;, t5) fmt.Printf(&quot;t6: %T\n&quot;, t6) } </code></pre> <p>Alternatively, you can use <code>TypeOf</code> function from the reflection package <code>reflect</code>. However, it uses complex and expensive runtime reflection, so if you just need to print the type of variable, it&rsquo;s a better idea to use the first method.</p> <pre><code>package main import ( &quot;fmt&quot; &quot;reflect&quot; ) func main() { t1 := &quot;text&quot; t2 := []string{&quot;apple&quot;, &quot;strawberry&quot;, &quot;blueberry&quot;} t3 := map[string]float64{&quot;strawberry&quot;: 3.2, &quot;blueberry&quot;: 1.2} t4 := 2 t5 := 4.5 t6 := true fmt.Printf(&quot;t1: %s\n&quot;, reflect.TypeOf(t1)) fmt.Printf(&quot;t2: %s\n&quot;, reflect.TypeOf(t2)) fmt.Printf(&quot;t3: %s\n&quot;, reflect.TypeOf(t3)) fmt.Printf(&quot;t4: %s\n&quot;, reflect.TypeOf(t4)) fmt.Printf(&quot;t5: %s\n&quot;, reflect.TypeOf(t5)) fmt.Printf(&quot;t6: %s\n&quot;, reflect.TypeOf(t6)) } </code></pre> <p>Both methods return the same output:</p> <div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">t1: string t2: <span class="o">[]</span>string t3: map<span class="o">[</span>string<span class="o">]</span>float64 t4: int t5: float64 t6: bool</code></pre></div></description>
</item>
<item>
<title>‚û∞ Foreach loop in Go</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/foreach/</link>
<pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/foreach/</guid>
<description><p>There is no <code>foreach</code> loop in Golang, but the <code>for</code> loop can be adapted to work in the same way. In the example we first print out each word of strings array using loop pattern <code>for {index}, {value} := range {array}</code>. We don&rsquo;t need <code>index</code> so it can be replaced with the blank identifier (underscore). We can also use this <code>foreach</code> loop for map elements. In the example, we print out a color of fruit using keys and values of the map.</p> <pre><code>func main() { // array foreach loop fruits := []string{&quot;apple&quot;, &quot;strawberry&quot;, &quot;raspberry&quot;} for _, fruit := range fruits { fmt.Printf(&quot;Fruit: %s\n&quot;, fruit) } // map foreach loop fruitColors := map[string]string{ &quot;apple&quot;: &quot;green&quot;, &quot;strawberry&quot;: &quot;red&quot;, &quot;raspberry&quot;: &quot;pink&quot;, } for fruit, color := range fruitColors { fmt.Printf(&quot;%s color is %s\n&quot;, fruit, color) } } </code></pre> <p>Result: <div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Fruit: apple Fruit: strawberry Fruit: raspberry apple color is green strawberry color is red raspberry color is pink</code></pre></div></p></description>
</item>
<item>
<title>„Ä∞Ô∏è Encode to and decode from Base64 strings in Golang</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/encode-decode-base64/</link>
<pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/encode-decode-base64/</guid>
<description><p>In this example, you learn how to encode and decode strings using <a href="https://en.wikipedia.org/wiki/Base64" target="_blank">Base64</a>. The Base64 encoding takes binary data and turns it into text, making it more easily transmitted in text-based formats like JSON or HTML forms.</p> <pre><code>package main import ( &quot;encoding/base64&quot; &quot;fmt&quot; ) func main() { text := &quot;hello from gosamples.dev base64 encoding/decoding example!&quot; // encoding encodedText := base64.StdEncoding.EncodeToString([]byte(text)) fmt.Printf(&quot;Encoded text: %s\n&quot;, encodedText) // decoding rawDecodedText, err := base64.StdEncoding.DecodeString(encodedText) if err != nil { panic(err) } fmt.Printf(&quot;Decoded text: %s\n&quot;, rawDecodedText) } </code></pre> <p>To do this we need standard library <code>encoding/base64</code> package which contains <code>EncodeToString</code> and <code>DecodeToString</code> methods. <code>EncodeToString</code> takes a byte array and returns an encoded string. <code>DecodeToString</code> needs an encoded string argument and returns a decoded byte array (and error).</p> <p>Result: <div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Encoded text: <span class="nv">aGVsbG8gZnJvbSBnb3NhbXBsZXMuZGV2IGJhc2U2NCBlbmNvZGluZy9kZWNvZGluZyBleGFtcGxlIQ</span><span class="o">==</span> Decoded text: hello from gosamples.dev base64 encoding/decoding example!</code></pre></div></p></description>
</item>
<item>
<title>üìù Visual Studio Code keyboard shortcuts: toggle sidebar</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/vscode-toggle-sidebar/</link>
<pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/vscode-toggle-sidebar/</guid>
<description><p>To toggle sidebar in Visual Studio Code you need to use:</p> <div class="highlight-text text--center"><code>Ctrl+B</code> on Windows or Linux</div> <div class="highlight-text text--center"><code>‚åòB</code> (<code>Cmd+B</code>) on macOS</div> <p>Press the shortcut combination to hide the sidebar first, then do it a second time to show it.</p> <div class="image--center"><img src="https://gosamples.dev/vscode-toggle-sidebar/toggle_sidebar.gif" alt="Toggle"></div></description>
</item>
<item>
<title>üëã Golang Hello World</title>
<enclosure url="https://gosamples.dev/rss-thumbnail.png" type="image/png"/>
<link>https://gosamples.dev/hello-world/</link>
<pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate>
<guid>https://gosamples.dev/hello-world/</guid>
<description><p>In this example, you learn how to write the classic &ldquo;Hello World&rdquo; program. &ldquo;Hello World&rdquo; is a simple program that outputs <code>Hello World</code> on the screen. It&rsquo;s traditionally the first program written by people learning to code in a new programming language.</p> <p>Let&rsquo;s check how to write Golang &ldquo;Hello World&rdquo; program step by step.</p> <blockquote> <p>If you don&rsquo;t have Golang installed, visit <a href="https://golang.org/doc/install" target="_blank">the official Go website</a> and install version that suits your operating system.</p> </blockquote> <hr> <h3 id="golang-hello-world-program">Golang &ldquo;Hello World&rdquo; program</h3> <ol class="steps"> <li class="steps__item"> <span class="steps__itemTitle">Create <code>hello-world</code> directory</span> <p>It is a good practice that each new project has its directory.</p> </li> <li class="steps__item"> <span class="steps__itemTitle">Save the following program as <code>main.go</code> in the <code>hello-world</code> directory</span> <pre><code>package main import &quot;fmt&quot; func main() { fmt.Println(&quot;Hello World!&quot;) } </code></pre> </li> <li class="steps__item"> <span class="steps__itemTitle">Run your program</span> <pre><code>$ go run hello-world/main.go </code></pre> <p><strong>Output</strong></p> <pre><code>Hello World! </code></pre> <p>Congratulations! You just created your first program in Go üöÄ.</p> </li> </ol> <hr> <h3 id="how-golang-hello-world-program-works">How Golang &ldquo;Hello World&rdquo; program works</h3> <pre><code>package main </code></pre> <p>In Golang every program starts with a package declaration. Package is a collection of source files used to orgranize related code into a single unit.</p> <pre><code>import &quot;fmt&quot; </code></pre> <p>Declaration of package import. In our program, <code>fmt</code> package is imported and will be used in the <code>main()</code> function to print the &ldquo;Hello World&rdquo; text to standard output (your screen).</p> <pre><code>func main() { } </code></pre> <p>Definition of the <code>main()</code> function. The <code>main()</code> is a special function that is executed first when a program starts. <strong>The <code>main()</code> function in Golang should always be declared in the <code>main</code> package.</strong></p> <pre><code>fmt.Println(&quot;Hello World!&quot;) </code></pre> <p>Content of the <code>main()</code> is the call to the <code>Println()</code> function of the <code>fmt</code> package. After running the program, it prints passed argument (our &ldquo;Hello World!&rdquo; text) to the standard output along with a new line.</p></description>
</item>
</channel>
</rss>
}
